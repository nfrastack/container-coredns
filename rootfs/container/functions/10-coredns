#!/command/with-contenv bash
# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

coredns_bootstrap_filesystem() {
    case "${1}" in
        coredns )
            create_folder \
                    "${CONFIG_PATH},\
                    ${DATA_PATH}"\
                    coredns:coredns 755
        ;;
        logs )
            case "${LOG_TYPE,,}" in
                file | both )
                    create_folder \
                        "${LOG_PATH}" \
                        coredns:coredns 755
                        create_logrotate coredns "${LOG_PATH}"/"${LOG_FILE}" coredns "${COREDNS_USER}" coredns
                    ;;
            esac
        ;;
    esac
}

coredns_configure_coredns() {
    if [ ! -f "${CONFIG_PATH}/${CONFIG_FILE}" ]; then
        s6-setuidgid "${COREDNS_USER}" touch "${CONFIG_PATH}/${CONFIG_FILE}"
    fi

    if [ "${SETUP_TYPE,,}" = "auto" ]; then
        print_info "Generating configuration file ${CONFIG_PATH}/${CONFIG_FILE} for CoreDNS"

        if [ -n "${DOMAIN_NAME}" ] && [ -z "${DOMAIN_01_NAME}" ]; then
            export DOMAIN_01_NAME="${DOMAIN_NAME}"
            unset DOMAIN_NAME
        fi

        if [ -z "${DOMAIN_01_NAME}" ]; then
            print_error "Need to set DOMAIN_01_NAME variable to configure domains"
            exit 1
        fi

        # Write header
        echo "### Autogenerated_on_$(date +%Y-%m-%dT%H:%M:%S_%Z)" | silent sudo coredns tee "${CONFIG_PATH}/${CONFIG_FILE}"

        # Count domains and configure each
        domainnum=$(printenv | sort | grep -cE '^DOMAIN_[0-9]+_NAME=')
        for ((i = 1; i <= domainnum; i++)); do
            padded_i=$(printf "%02d" $i)

            # Get domain variables
            domain_name_var="DOMAIN_${padded_i}_NAME"
            domain_zonefile_var="DOMAIN_${padded_i}_ZONE_FILE"
            domain_hostsfile_var="DOMAIN_${padded_i}_HOSTS_FILE"
            domain_transfer_to_var="DOMAIN_${padded_i}_TRANSFER_TO"
            domain_mode_var="DOMAIN_${padded_i}_ROLE"
            domain_transfer_from_var="DOMAIN_${padded_i}_TRANSFER_FROM"
            domain_listen_port_var="DOMAIN_${padded_i}_LISTEN_PORT"

            # Get values
            domain_name="${!domain_name_var}"
            domain_zonefile="${!domain_zonefile_var}"
            domain_hostsfile="${!domain_hostsfile_var}"
            domain_transfer_to="${!domain_transfer_to_var}"
            domain_mode="${!domain_mode_var}"
            domain_transfer_from="${!domain_transfer_from_var}"
            domain_listen_port="${!domain_listen_port_var:-${LISTEN_PORT}}"

            # Per-domain forwarding variables with fallback to global and then default
            domain_enable_forward_var="DOMAIN_${padded_i}_ENABLE_FORWARD"
            domain_forward_mode_var="DOMAIN_${padded_i}_FORWARD_MODE"
            domain_forward_upstream_host_var="DOMAIN_${padded_i}_FORWARD_UPSTREAM_HOST"

            domain_enable_forward="${!domain_enable_forward_var:-${ENABLE_FORWARD:-${DEFAULT_ENABLE_FORWARD}}}"
            domain_forward_mode="${!domain_forward_mode_var:-${FORWARD_MODE:-${DEFAULT_FORWARD_MODE}}}"
            domain_forward_upstream_host="${!domain_forward_upstream_host_var:-${FORWARD_UPSTREAM_HOST:-${DEFAULT_FORWARD_UPSTREAM_HOST}}}"

            # Per-domain toggle variables with fallback to global/defaults
            domain_reload_var="DOMAIN_${padded_i}_RELOAD"
            domain_cache_var="DOMAIN_${padded_i}_CACHE"
            domain_errors_var="DOMAIN_${padded_i}_ERRORS"
            domain_log_queries_var="DOMAIN_${padded_i}_LOG_QUERIES"
            domain_loop_var="DOMAIN_${padded_i}_LOOP"

            domain_reload="${!domain_reload_var:-${RELOAD:-${DEFAULT_RELOAD}}}"
            domain_cache="${!domain_cache_var:-${CACHE:-${DEFAULT_CACHE}}}"
            domain_errors="${!domain_errors_var:-${ERRORS:-${DEFAULT_ERRORS}}}"
            domain_log_queries="${!domain_log_queries_var:-${LOG_QUERIES:-${DEFAULT_LOG_QUERIES}}}"
            domain_loop="${!domain_loop_var:-${LOOP:-${DEFAULT_LOOP}}}"

            if [ -n "${domain_name}" ]; then
                sanity_var domain_mode "Need to set DOMAIN_${padded_i}_ROLE variable 'primary' or 'secondary' to configure domain ${domain_name}"

                echo "${domain_name}:${domain_listen_port} {" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                echo "  bind ${LISTEN_IP}" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"

                if [ "${domain_mode}" = "secondary" ]; then
                    echo "  # Secondary zone for ${domain_name}" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                    echo "  secondary {" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                    for from_addr in ${domain_transfer_from}; do
                        echo "    transfer from ${from_addr}" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                    done
                    echo "  }" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                else
                    if [ -n "${domain_hostsfile}" ]; then
                        echo "  hosts ${domain_hostsfile} ${domain_name} {" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                        echo "    fallthrough" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                        echo "  }" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                    fi
                    if [ -n "${domain_zonefile}" ]; then
                        echo "  file ${domain_zonefile} ${domain_name} {" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                        echo "    reload 30s" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                        echo "    fallthrough" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                        echo "  }" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                        if [ -n "${domain_transfer_to}" ]; then
                            echo "  transfer {" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                            echo "    to ${domain_transfer_to}" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                            echo "  }" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                        elif [ -n "${TRANSFER_TO}" ]; then
                            echo "  transfer {" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                            echo "    to ${TRANSFER_TO}" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                            echo "  }" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                        fi
                    fi
                fi

                if [ "${domain_enable_forward,,}" = "true" ]; then
                    case "${domain_forward_mode,,}" in
                        upstream)
                            echo "  forward . ${domain_forward_upstream_host}" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                            ;;
                        system|*)
                            echo "  forward . /etc/resolv.conf" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                            ;;
                    esac
                fi
                if var_true "$domain_errors"; then
                    echo "  errors" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                fi
                if [ -n "$domain_cache" ]; then
                    echo "  cache $domain_cache" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                fi
                if var_true "$domain_loop"; then
                    echo "  loop" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                fi
                if var_true "${domain_log_queries}"; then
                    echo "  log" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                fi
                if var_true "$domain_reload"; then
                    echo "  reload" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                fi
                echo "}" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
                echo "" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
            fi
        done

        if [ -f "${CONFIG_INCLUDE}" ]; then
            echo "import ${CONFIG_INCLUDE}" | silent sudo -u ${COREDNS_USER} tee -a "${CONFIG_PATH}/${CONFIG_FILE}"
        fi
    else
        print_info "Skipping configuration generation - using existing configuration file"
    fi
}


